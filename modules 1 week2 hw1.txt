http://www.codeskulptor.org/#user43_9fUXcogAZh5Kkhk.py

"""
Graphs for Module 1
"""

EX_GRAPH0 = { 
    0: set([1,2]),
    1: set([]),
    2: set([]) 
    }

EX_GRAPH1 = { 0: set([1,4,5]),
              1: set([2,6]),
              2: set([3]),
              3: set([0]),
              4: set([1]),
              5: set([2]),
              6: set([])
            }


EX_GRAPH2 = {0 : set([1,4,5]),
             1 : set([2,6]),
             2 : set([3,7]),
             3 : set([7]),
             4 : set([1]),
             5 : set([2]),
             6 : set([]),
             7 : set([3]),
             8 : set([1,2]),
             9 : set([0, 3, 4,5,6,7])
            }



def compute_in_degrees(diagraph):
    """
    Compute in degrees of a directed grapph
    """    
    valuelist = diagraph.values()
    keylist = diagraph.keys()
    ans = {}
    for key in keylist:
        ans[key] = 0
    for value in valuelist:
        for item in value:
            ans[item] += 1
    return ans
            
def in_degree_distribution(diagraph):
    """
    Compute in degrees distribution of a directed grapph
    """  
    degrees = compute_in_degrees(diagraph)
    nodelist = degrees.keys()
    ans = {}
    for node in nodelist:
        indegree = degrees[node]
        if ans.has_key(indegree) == False:
            ans[indegree] = 1
        else:
            ans[indegree] += 1
    return ans

def make_complete_graph(num_nodes):
    """
    Make a complet graph of N number of nodes
    """      
    ans = {}
    if num_nodes >= 0:
        nodelist = range(num_nodes)
        for node in nodelist:
            copy = nodelist[0: num_nodes]
            copy.remove(node)
            ans[node] = set(copy)
    return ans
