http://www.codeskulptor.org/#user43_BCiNMvyFpV_511.py
"""
Student template code for Project 3
Student will implement five functions:

slow_closest_pair(cluster_list)
fast_closest_pair(cluster_list)
closest_pair_strip(cluster_list, horiz_center, half_width)
hierarchical_clustering(cluster_list, num_clusters)
kmeans_clustering(cluster_list, num_clusters, num_iterations)

where cluster_list is a 2D list of clusters in the plane
"""

import math
import alg_cluster



######################################################
# Code for closest pairs of clusters

def pair_distance(cluster_list, idx1, idx2):
    """
    Helper function that computes Euclidean distance between two clusters in a list

    Input: cluster_list is list of clusters, idx1 and idx2 are integer indices for two clusters
    
    Output: tuple (dist, idx1, idx2) where dist is distance between
    cluster_list[idx1] and cluster_list[idx2]
    """
    return (cluster_list[idx1].distance(cluster_list[idx2]), min(idx1, idx2), max(idx1, idx2))

def slow_closest_pair(cluster_list):
    """
    Compute the distance between the closest pair of clusters in a list (slow)

    Input: cluster_list is the list of clusters
    
    Output: tuple of the form (dist, idx1, idx2) where the centers of the clusters
    cluster_list[idx1] and cluster_list[idx2] have minimum distance dist.       
    """
    idx_1 = -1
    idx_2 = -1
    distance = tuple([float("inf"), idx_1, idx_2])
    for dummy_1 in range(len(cluster_list)):
        for dummy_2 in range(dummy_1 + 1,len(cluster_list)):
            if pair_distance(cluster_list,dummy_1,dummy_2) < distance:
                distance = pair_distance(cluster_list,dummy_1,dummy_2)           
    return distance


def fast_closest_pair(cluster_list):
    """
    Compute the distance between the closest pair of clusters in a list (fast)

    Input: cluster_list is list of clusters SORTED such that horizontal positions of their
    centers are in ascending order
    
    Output: tuple of the form (dist, idx1, idx2) where the centers of the clusters
    cluster_list[idx1] and cluster_list[idx2] have minimum distance dist.       
    """
    length = len(cluster_list)
    if length <= 3:
        distance = slow_closest_pair(cluster_list)
    else:
        mid = length/2
        cluster1 = cluster_list[0:mid]
        cluster2 = cluster_list[mid:length]
        distance1 = fast_closest_pair(cluster1)
        pdistance2 = fast_closest_pair(cluster2)
        distance2 = tuple([list(pdistance2)[0], list(pdistance2)[1] + mid, list(pdistance2)[2] +mid])
        distance = min(distance1, distance2)
        dstrip = list(distance)[0]
        middle = 0.5 * (cluster_list[mid-1].horiz_center() +cluster_list[mid].horiz_center())
        distance = min(distance, closest_pair_strip(cluster_list, middle, dstrip))
    return distance

def closest_pair_strip(cluster_list, horiz_center, half_width):
    """
    Helper function to compute the closest pair of clusters in a vertical strip
    
    Input: cluster_list is a list of clusters produced by fast_closest_pair
    horiz_center is the horizontal position of the strip's vertical center line
    half_width is the half the width of the strip (i.e; the maximum horizontal distance
    that a cluster can lie from the center line)

    Output: tuple of the form (dist, idx1, idx2) where the centers of the clusters
    cluster_list[idx1] and cluster_list[idx2] lie in the strip and have minimum distance dist.       
    """
    set1 = list()
    new_cluster_list = cluster_list[:]
    for dummy_1 in range(len(cluster_list)):
        if horiz_center - half_width <= cluster_list[dummy_1].horiz_center() <= horiz_center + half_width:
            set1.append(dummy_1)
    new_cluster_list.sort(key = lambda cluster: cluster.vert_center())
    klength = len(set1)
    idx1 = -1
    idx2 = -1
    distance = tuple([float("inf"), idx1, idx2])
    for dummy_2 in range(klength-1):
        for dummy_3 in range(dummy_2 + 1, klength):
            distance = min(distance, pair_distance(cluster_list, set1[dummy_2], set1[dummy_3]))
    return distance


######################################################################
# Code for hierarchical clustering


def hierarchical_clustering(cluster_list, num_clusters):
    """
    Compute a hierarchical clustering of a set of clusters
    Note: the function may mutate cluster_list
    
    Input: List of clusters, integer number of clusters
    Output: List of clusters whose length is num_clusters
    """
    print cluster_list
    new_cluster_list = cluster_list[:]
    while len(new_cluster_list) > num_clusters:
        distance = slow_closest_pair(new_cluster_list)
        print distance
        idx1 = list(distance)[1]
        idx2 = list(distance)[2]
        print new_cluster_list[idx1], new_cluster_list[idx2]
        new_cluster_list[idx1].merge_clusters(new_cluster_list[idx2])
        new_cluster_list.pop(idx2)
    return new_cluster_list

######################################################################
# Code for k-means clustering

def cluster_center_distance(cluster, center):
    list1 = list(center)
    sum1 = (cluster.horiz_center() - list1[0]) ** 2
    sum2 = (cluster.vert_center() - list1[1]) ** 2
    return math.sqrt(sum1 + sum2)

def kmeans_clustering(cluster_list, num_clusters, num_iterations):
    """
    Compute the k-means clustering of a set of clusters
    Note: the function may not mutate cluster_list
    
    Input: List of clusters, integers number of clusters and number of iterations
    Output: List of clusters whose length is num_clusters
    """

    # position initial clusters at the location of clusters with largest populations
    
    
    
    # initialize the centers
    center_list =list()
    for dummy_k in range(num_clusters):
        mean_dummy_k = tuple([0, 0])
        center_list.append(mean_dummy_k)
    
    # repatation of q times    
    for dummy_q in range(num_iterations):
        print dummy_q
        
        # initialize k empty sets 
        cluster_dummy_list = list()
        for dummy_k in range(num_clusters):
            cluster_dummy_k = alg_cluster.Cluster(set([]), 0, 0, 0, 0)
            cluster_dummy_list.append(cluster_dummy_k)
            
        # cluster pj into empty sets from line 5
        for dummy_j in range(len(cluster_list)):
            minium = 0
            distance1 = float("inf")
            # choice the point with minium distance
            for dummy_f in range(num_clusters):
                distance = cluster_center_distance(cluster_list[dummy_j], center_list[dummy_f])
                if distance < distance1:
                    distance1 = distance
                    minium = dummy_f
            cluster_dummy_list[minium].merge_clusters(cluster_list[minium])

        
        # update center from line 8   
        for dummy_f in range(num_clusters):
            mean_dummy_f = tuple([cluster_dummy_list[dummy_f].horiz_center(), cluster_dummy_list[dummy_f].vert_center()]) 
            
    return cluster_dummy_list
